package de.cyface.app.r4r.ui.trips

import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.View.GONE
import android.view.ViewGroup
import androidx.fragment.app.Fragment
import com.github.mikephil.charting.charts.LineChart
import com.github.mikephil.charting.data.Entry
import com.github.mikephil.charting.data.LineData
import com.github.mikephil.charting.data.LineDataSet
import de.cyface.app.r4r.R
import de.cyface.app.r4r.ServiceProvider
import de.cyface.app.r4r.databinding.FragmentTripsDetailsBinding
import de.cyface.datacapturing.CyfaceDataCapturingService
import de.cyface.datacapturing.persistence.CapturingPersistenceBehaviour
import de.cyface.persistence.DefaultPersistenceLayer
import de.cyface.persistence.strategy.DefaultLocationCleaning
import kotlin.math.round
import kotlin.math.roundToInt


class DetailsFragment : Fragment() {

    private var _binding: FragmentTripsDetailsBinding? = null

    // This property is only valid between onCreateView and onDestroyView.
    private val binding get() = _binding!!

    private lateinit var capturing: CyfaceDataCapturingService

    private lateinit var persistence: DefaultPersistenceLayer<CapturingPersistenceBehaviour>

    // For some reasons the Args class is not generated by safeargs
    //private val args: DetailsFragmentArgs by navArgs()

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        if (activity is ServiceProvider) {
            capturing = (activity as ServiceProvider).capturing
            persistence = capturing.persistenceLayer
        } else {
            throw RuntimeException("Context doesn't support the Fragment, implement `ServiceProvider`")
        }
    }

    override fun onCreateView(
        inflater: LayoutInflater,
        container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        _binding = FragmentTripsDetailsBinding.inflate(inflater, container, false)
        val root: View = binding.root

        // Get measurementId from calling fragment
        val measurementId = requireArguments().getLong("measurementId")
        binding.tripTitle.text = requireContext().getString(R.string.trip_id, measurementId)

        // Load measurement
        val measurement = persistence.loadMeasurement(measurementId)

        val distanceKm = measurement?.distance?.div(1000.0)
        binding.distanceView.text =
            if (distanceKm == null) "" else getString(R.string.distanceKm, distanceKm)

        val co2Kg = distanceKm?.times(95)?.div(1000)
        binding.co2View.text = if (co2Kg == null) "" else getString(R.string.co2kg, co2Kg)

        val millis = if (measurement == null) null else persistence.loadDuration(measurement.id)
        val seconds = millis?.div(1000)
        val minutes = seconds?.div(60)
        val hours = minutes?.div(60)
        val hoursText = if (hours == null || hours == 0L) "" else getString(R.string.hours, hours) + " "
        val minutesText = if (minutes == null || minutes == 0L) "" else getString(R.string.minutes, minutes % 60) + " "
        val secondsText = if (seconds == null) "" else getString(R.string.seconds, seconds % 60)
        val durationText = hoursText + minutesText + secondsText
        binding.durationView.text = durationText

        val ascendText: String?
        val averageSpeedKmh =
            persistence.loadAverageSpeed(
                measurementId,
                DefaultLocationCleaning()
            ) * 3.6

        val ongoingCapturing = measurement != null
        val ascend = if (ongoingCapturing) persistence.loadAscend(measurementId) else null
        ascendText = getString(R.string.ascendMeters, ascend ?: 0.0)

        val maxSpeedMps = persistence.loadMaxSpeed(measurementId, DefaultLocationCleaning())
        val maxSpeedKmPh = maxSpeedMps.times(3.6)
        binding.speedView.text =
            getString(R.string.speedKphWithAverage, maxSpeedKmPh, averageSpeedKmh)
        binding.ascendView.text = ascendText

        // Chart
        val chart = root.findViewById(R.id.chart) as LineChart
        val altitudes = persistence.loadAltitudes(measurementId)
        if (altitudes == null || altitudes.isEmpty()) {
            binding.elevationProfileTitle.text = getString(R.string.elevation_profile_no_data)
            chart.visibility = GONE
        } else {
            val allEntries = ArrayList<List<Entry>>()
            var x = 1
            val values = altitudes.sumOf { trackAltitudes -> trackAltitudes.count() }
            altitudes.forEach { trackAltitudes ->
                val entries = ArrayList<Entry>()
                trackAltitudes.forEach {
                    entries.add(Entry(x.toFloat(), it.toFloat()))
                    x++
                }
                x += round(values * 0.05).roundToInt() // 5 % gap between sub-tracks
                if (entries.isNotEmpty()) {
                    allEntries.add(entries)
                }
            }
            val textColor = resources.getColor(R.color.text)
            val resources = requireContext().resources
            val datasets: List<LineDataSet> = ArrayList()
            allEntries.forEach {
                val dataSet = LineDataSet(it, "sub-track")
                dataSet.color = resources.getColor(R.color.green_700)
                dataSet.setDrawCircles(false)
                (datasets as ArrayList<LineDataSet>).add(dataSet)
            }
            val data = LineData(datasets)
            data.setValueTextColor(textColor)
            chart.data = data
            chart.axisLeft.textColor = textColor
            chart.axisRight.textColor = textColor
            chart.description.text = resources.getString(R.string.chart_label)
            chart.description.textColor = textColor
            chart.legend.isEnabled = false
            chart.xAxis.isEnabled = false
        }

        return root
    }

    override fun onDestroyView() {
        super.onDestroyView()
        _binding = null
    }
}