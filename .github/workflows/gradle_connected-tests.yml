# Copyright 2023-2025 Cyface GmbH
#
# This file is part of the Cyface App for Android.
#
# The Cyface App for Android is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# The Cyface App for Android is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with the Cyface App for Android. If not, see <http://www.gnu.org/licenses/>.

# This workflow ensures the connected tests keep working
#
# @author Armin Schnabel
# @version 1.0.0
# @since 3.1.4
name: Gradle Connected Tests

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  androidTest:
    # Faster, but MacOS costs 8 ct/min instead of 0.8 ct/min of on Linux.
    # Unfortunately, `DataCapturingServiceTest.testDisconnectReconnect` fails on linux stack.
    # But as this is a public repository, Github Actions are currently free of charge.
    #runs-on: macos-latest # as recommended in `actions/android-emulator-runner`

    # But we had to add `free-disk-space` to fix emulator flakiness. It only runs on ubuntu.
    runs-on: ubuntu-latest

    timeout-minutes: 55
    strategy:
      matrix:
        api-level: [ 28 ]
        target: [ google_apis ] # required to avoid NPE in `Maps` at `GoogleMap.clear()`

    steps:
      # From https://github.com/android/nowinandroid/pull/1219/files to fix flaky emulator start
      # See https://github.com/ReactiveCircus/android-emulator-runner/issues/324#issuecomment-1998737488
      - name: Delete unnecessary tools ðŸ”§
        uses: jlumbroso/free-disk-space@v1.3.1
        with:
          android: false # Keep Don't remove Android tools
          tool-cache: true # Remove image tool cache - rm -rf "$AGENT_TOOLSDIRECTORY"
          dotnet: true # rm -rf /usr/share/dotnet
          haskell: true # rm -rf /opt/ghc...
          swap-storage: true # rm -f /mnt/swapfile (4GiB)
          docker-images: false # Takes 16s (`nowinandroid`), enable if needed in the future
          large-packages: false # includes google-cloud-sdk and it's slow

      # Set up KVM permissions to enable efficient Android emulator runs by modifying udev rules for universal access.
      # From https://github.com/android/nowinandroid/blob/main/.github/workflows/Build.yaml#L142
      - name: Enable KVM group perms
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm
          ls /dev/kvm

      - name: Checkout
        uses: actions/checkout@v4
        # Does not work out of the box with a private repository
        # see https://github.com/actions/checkout/issues/287
        #with:
        #  submodules: true
      - name: Link Deploy Keys for Submodules
        uses: webfactory/ssh-agent@v0.7.0
        with:
          # This allows to add multiple individual deploy keys for multiple private submodules
          # for a guide, see https://github.com/marketplace/actions/webfactory-ssh-agent
          ssh-private-key: |
            ${{ secrets.SSH_DEPLOY_KEY_CAMERA_SERVICE }}
      - name: Checkout submodules
        run: git submodule update --init --recursive

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Add gradle.properties
        run: |
          # Use a personal read token to install the Cyface Utils package
          cp gradle.properties.template gradle.properties
          echo "githubUser=${{ secrets.GH_READ_ACCOUNT }}" >> gradle.properties
          echo "githubToken=${{ secrets.GH_READ_TOKEN }}" >> gradle.properties
          echo "google.maps_api_key=${{ secrets.GOOGLE_MAPS_KEY }}" >> gradle.properties
          echo "google.maps_api_key.r4r=${{ secrets.GOOGLE_MAPS_KEY_R4R }}" >> gradle.properties

      - name: Inject dummy credentials for UI tests to skip login
        run: |
          # This mock API accepts all credentials and allows the UI test to skip the login
          echo "cyface.staging_api=https://demo.cyface.de/api/v2" >> gradle.properties
          echo "cyface.staging_provider_api=https://demo.cyface.de/provider" >> gradle.properties
          echo "cyface.staging_incentives_api=https://demo.cyface.de/incentives" >> gradle.properties
          echo "cyface.staging_oauth_discovery=https://demo.cyface.de/auth" >> gradle.properties
          echo "cyface.staging_user=guestLogin" >> gradle.properties
          echo "cyface.staging_password=guestPassword" >> gradle.properties
          echo "cyface.oauth_redirect=de.cyface.app:/oauth2redirect" >> gradle.properties
          echo "cyface.oauth_redirect.r4r=de.cyface.app.r4r:/oauth2redirect" >> gradle.properties
          echo "cyface.oauth_redirect.digural=de.cyface.app.digural:/oauth2redirect" >> gradle.properties
          # Digural
          echo "digural.api=${{ secrets.DIGURAL_API }}" >> gradle.properties

      # Not executing build here on MacOS stack (10x costs, if private repository)
      # Not using "gradle build" as we don't want to run the tests of all dependencies (e.g. backend)
      #- name: Assemble with Gradle
      #  run: ./gradlew assemble
      #- name: Test with Gradle
      #  run: ./gradlew :ui:cyface:test :ui:r4r:test

      # Add caching to speed up connected tests below (see `actions/android-emulator-runner`)
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v3

      #- name: AVD cache
      #  uses: actions/cache@v3
      #  id: avd-cache
      #  with:
      #    path: |
      #      ~/.android/avd/*
      #      ~/.android/adb*
      #    key: avd-${{ matrix.api-level }}-${{ matrix.target }} #-${{ matrix.arch }}

      #- name: Create AVD and generate snapshot for caching
      #  if: steps.avd-cache.outputs.cache-hit != 'true'
      #  uses: reactivecircus/android-emulator-runner@v2
      #  with:
      #    api-level: ${{ matrix.api-level }}
      #    target: ${{ matrix.target }}
      #    force-avd-creation: false
      ## the recommended options by the Actions did not work here?
      ## - emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
      ## Actions guide uses: `disable-animations: false` but this didn't work here?
      #    disable-animations: true
      #    script: echo "Generated AVD snapshot for caching."

      # From https://github.com/android/nowinandroid/blob/main/.github/workflows/Build.yaml#L142
      - name: Build projects before running emulator
        run: ./gradlew :ui:cyface:packageDebugAndroidTest

      # Only execute mock tests to exclude `@FlakyTest`s (instead of running `connectedCheck`)
      - name: Connected tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          #target: ${{ matrix.target }}
          # From https://github.com/android/nowinandroid >>>
          arch: x86_64
          disable-animations: true
          disk-size: 6000M
          heap-size: 600M
          # <<<<
          # default options are: -no-window -gpu swiftshader_indirect -no-snapshot -noaudio -no-boot-anim
          # Action recommendation: -no-snapshot-save -camera-back none
          # To support future camera capturing tests: -camera-back emulated
          #   but this lead to `Timeout waiting for emulator` error (which might be fixed now!)
          emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          #avd-name: ubuntu-avd-28
          #force-avd-creation: false
          script: ./gradlew :ui:cyface:connectedDebugAndroidTest --daemon
          # To execute a single test class
          #script: ./gradlew :ui:cyface:connectedDebugAndroidTest -Pandroid.testInstrumentationRunnerArguments.class=de.cyface.app.CapturingNotificationTest --daemon

      # From https://github.com/android/nowinandroid/blob/main/.github/workflows/Build.yaml#L142
      - name: Upload test reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-reports-${{ matrix.api-level }}
          path: '**/build/reports/androidTests'
