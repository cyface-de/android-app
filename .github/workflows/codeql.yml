# This workflow configures CodeQL as the auto-configuration fails for Java/Kotlin.
#
# @author Armin Schnabel
# @version 1.0.0
# @since 3.15.0
name: "CodeQL Analysis"

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '20 16 * * 1'

jobs:
  analyze:
    name: Analyze (${{ matrix.language }})
    runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}

    permissions:
      # required for all workflows
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        include:
          - language: java-kotlin
            build-mode: manual # autobuild fails (gradle.properties required)

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        # Does not work out of the box with a private repository
        # see https://github.com/actions/checkout/issues/287
        #with:
        #  submodules: true
      - name: Link Deploy Keys for Submodules
        uses: webfactory/ssh-agent@v0.7.0
        with:
          # This allows to add multiple individual deploy keys for multiple private submodules
          # for a guide, see https://github.com/marketplace/actions/webfactory-ssh-agent
          ssh-private-key: |
            ${{ secrets.SSH_DEPLOY_KEY_CAMERA_SERVICE }}
      - name: Checkout submodules
        run: git submodule update --init --recursive

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          # 'java-kotlin' to analyze code written in Java, Kotlin or both
          languages: ${{ matrix.language }}
          build-mode: ${{ matrix.build-mode }}

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          # Only update cache on hash change (gradle build files and the wrapper properties)
          key: gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: gradle-

      - name: Add gradle.properties
        run: |
          # Use a personal read token to install the Cyface Utils package
          cp gradle.properties.template gradle.properties
          echo "githubUser=${{ secrets.GH_READ_ACCOUNT }}" >> gradle.properties
          echo "githubToken=${{ secrets.GH_READ_TOKEN }}" >> gradle.properties
          # This mock API accepts all credentials and allows the UI test to skip the login
          echo "cyface.staging_api=https://demo.cyface.de/api/v2" >> gradle.properties
          echo "cyface.staging_provider_api=https://demo.cyface.de/provider" >> gradle.properties
          echo "cyface.staging_incentives_api=https://demo.cyface.de/incentives" >> gradle.properties
          echo "cyface.staging_oauth_discovery=https://demo.cyface.de/auth" >> gradle.properties
          echo "cyface.staging_user=guestLogin" >> gradle.properties
          echo "cyface.staging_password=guestPassword" >> gradle.properties
          echo "cyface.oauth_redirect=de.cyface.app:/oauth2redirect" >> gradle.properties
          echo "cyface.oauth_redirect.r4r=de.cyface.app.r4r:/oauth2redirect" >> gradle.properties
          echo "cyface.oauth_redirect.digural=de.cyface.app.digural:/oauth2redirect" >> gradle.properties
          # Digural
          echo "digural.api=${{ secrets.DIGURAL_API }}" >> gradle.properties

      # Executing build here on Ubuntu stack (1/10th costs of MacOS stack)
      # Not using "gradle build" as we don't want to run the tests of all dependencies (e.g. backend)
      - name: Assemble with Gradle
        run: ./gradlew :ui:cyface:assembleDebug :ui:r4r:assembleDebug :ui:digural:assembleDebug
      - name: Test with Gradle
        run: ./gradlew :ui:cyface:testDebugUnitTest :ui:r4r:testDebugUnitTest :ui:digural:testDebugUnitTest

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"
